ARG HTTP_PROXY=""
ARG HTTPS_PROXY=""

FROM node:lts-alpine AS buildernodejsache
ARG HTTP_PROXY
ARG HTTPS_PROXY
ENV http_proxy=${HTTP_PROXY}
ENV https_proxy=${HTTPS_PROXY}
ADD ui/package.json /app/package.json
WORKDIR /app
RUN npm i

FROM node:lts-alpine AS buildernodejs
ARG HTTP_PROXY
ARG HTTPS_PROXY
ENV http_proxy=${HTTP_PROXY}
ENV https_proxy=${HTTPS_PROXY}
ADD ui /app
WORKDIR /app
COPY --from=buildernodejsache /app/node_modules /app/node_modules
RUN npm run build \
    && chmod -R 644 /app/dist

FROM golang:1.21-alpine AS buildergolang
ARG HTTP_PROXY
ARG HTTPS_PROXY
ENV http_proxy=${HTTP_PROXY}
ENV https_proxy=${HTTPS_PROXY}
ENV CGO_ENABLED=0
ENV GOOS=linux
ADD backend /app
WORKDIR /app
COPY --from=buildernodejs /app/dist /app/embed/ui
RUN apk add --no-cache git ca-certificates

RUN go mod download && \
    go build -ldflags="-w -s" -o /usr/local/bin/als && \
    chmod +x /usr/local/bin/als

FROM alpine:3 AS builderenv
ARG HTTP_PROXY
ARG HTTPS_PROXY
ENV http_proxy=${HTTP_PROXY}
ENV https_proxy=${HTTPS_PROXY}
WORKDIR /app
ADD scripts /app
RUN sh /app/install-software.sh
RUN sh /app/install-speedtest.sh
RUN apk add --no-cache \
    iperf iperf3 \
    mtr \
    traceroute \
    iputils \
    ca-certificates \
    tzdata
RUN rm -rf /app

FROM alpine:3
LABEL org.opencontainers.image.title="NetMirror"
LABEL org.opencontainers.image.description="A modern looking-glass server with network diagnostics"
LABEL org.opencontainers.image.source="https://github.com/Yuri-NagaSaki/NetMirror"
LABEL org.opencontainers.image.licenses="MIT"

RUN apk add --no-cache ca-certificates tzdata && \
    addgroup -g 1001 -S netmirror && \
    adduser -u 1001 -S netmirror -G netmirror

COPY --from=builderenv / /
COPY --from=buildergolang /usr/local/bin/als /bin/als

USER netmirror
EXPOSE 80

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:${HTTP_PORT:-80}/ || exit 1

CMD ["/bin/als"] 